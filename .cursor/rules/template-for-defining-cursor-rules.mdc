---
title: Template for Defining Cursor Development Rules
description: This meta-template defines the required structure and content for all `.mdc` files that specify development rules for the AI Executor (Cursor).
tags: meta-template, ai-rules, development-standards, cursor-governance
---

# Cursor Rule Definition Template

## I. Rule Metadata (Frontmatter)
*(This section is mandatory for each rule file and provides essential information for Cursor to process the rule.)*

```yaml
---
# REQUIRED METADATA FIELDS:

# ruleId: A unique, machine-readable identifier for the rule.
# (e.g., "naming-convention-variables", "api-error-handling-001")
ruleId: "[unique-rule-identifier]"

# description: A concise, one-sentence summary of what the rule enforces.
description: "[Clear, one-line description of the rule's purpose]"

# severity: How critical a violation of this rule is.
# Values: ERROR (must be fixed), WARNING (should be fixed), INFO (good practice/suggestion)
severity: "[ERROR | WARNING | INFO]"

# globs: A comma-separated list of glob patterns specifying which files/directories this rule applies to.
# Use `**/*` for all files, or be specific e.g., "src/controllers/**/*.ts", "**/models/*.py"
# Leave empty or omit if `alwaysApply` is true and it's a general conceptual rule.
globs: "[path/to/files/*.ext, other/path/**/*]"

# alwaysApply: If true, the rule applies conceptually even if not tied to specific file patterns (e.g., project structure rules).
# If true, `globs` might be less relevant or empty. If false, `globs` are critical.
alwaysApply: [true | false]

# tags: Comma-separated keywords for categorizing the rule (e.g., "naming", "security", "performance", "python", "typescript", "api-design").
tags: "[tag1, tag2, relevant-technology]"

# relatedRules: Comma-separated list of `ruleId`s for related rules. Useful for building a connected rule system.
# (e.g., "naming-convention-functions", "style-guide-docstrings")
relatedRules: "[ruleId-A, ruleId-B]"

# autoFixable: Can the AI (Cursor) attempt to automatically fix violations of this rule?
# Values: NONE, SUGGEST_ONLY (AI provides a suggested fix), AUTO_APPLY (AI can apply the fix directly, possibly after confirmation)
autoFixable: "[NONE | SUGGEST_ONLY | AUTO_APPLY]"

# version: Version number for this rule (e.g., 1.0, 1.1).
version: "[X.Y]"

# lastUpdated: Date the rule was last modified (YYYY-MM-DD).
lastUpdated: "[YYYY-MM-DD]"

---
```

## II. Rule Definition & Explanation

### A. Rule Overview & Rationale  
Purpose: [Explain what this rule aims to achieve in 2-3 sentences.]  
Rationale/Benefit: [Explain the 'why' behind this rule. What problems does it prevent? What benefits does it provide (e.g., readability, maintainability, security, performance)? This helps both humans and AI understand its importance.]

### B. Detailed Requirements & Specifications  
Requirement 1: [e.g., "All variable names must be in camelCase."]  
Sub-point/Clarification: [e.g., "Acronyms within camelCase names should be treated as words (e.g., httpRequestHandler not HTTPRequestHander)."]  
Requirement 2: [e.g., "API error responses must include a correlationId field."]  
Data Type: [e.g., "String (UUID format)"]  
Source: [e.g., "Generated by the API gateway or initial request handler."]  
(Add as many specific requirements as needed)

### C. Examples of Compliance (✅ DO)

Example 1: [Brief description of what this example shows]  
// ✅ DO: [Brief comment explaining why this is correct]  
[Correct code/configuration example]  
```[language-if-applicable]
...
```

Example 2: [Brief description of what this example shows]  
// ✅ DO: [Brief comment explaining why this is correct]  
[Another correct code/configuration example]  
```[language-if-applicable]
...
```

(Reference actual project files if a good example already exists: "See example in @path/to/correct_file.ext:L10-L15")

### D. Examples of Non-Compliance (❌ DON'T / Anti-Patterns)

Anti-Example 1: [Brief description of what this anti-example shows]  
// ❌ DON'T: [Brief comment explaining why this is incorrect/violates the rule]  
[Incorrect code/configuration example]  
```[language-if-applicable]
...
```

Anti-Example 2: [Brief description of what this anti-example shows]  
// ❌ DON'T: [Brief comment explaining why this is incorrect/violates the rule]  
[Another incorrect code/configuration example]  
```[language-if-applicable]
...
```

### E. Automated Correction Logic / Suggestions (If autoFixable is not NONE)

For Violation of Requirement [Number/ID]:  
Detection Pattern: [Describe how to detect this specific violation, if more nuanced than the general rule.]  
Suggested Fix Description: [e.g., "If a variable is in snake_case, convert it to camelCase."]  
Transformation Logic (Conceptual): [e.g., "Replace underscores with capitalization of the next letter. Ensure first letter is lowercase."]

Example Transformation:
```diff
- const my_variable = 1; // ❌ Incorrect
+ const myVariable = 1;  // ✅ Corrected
```

(Add for other fixable aspects of the rule)

### F. File & Rule References

Related Rules: See @[ruleId-A].mdc, @[ruleId-B].mdc  
Code Examples in Project:  
Correct usage: @src/services/auth_service.py (lines 25-30)  
Anti-pattern to avoid (historical): @old_code/utils/helpers.js (function processDataOld)

## III. Rule Maintenance Log (Optional but Recommended)

[YYYY-MM-DD] - v[X.Y] - [Author/AI Session ID]: [Brief description of change, e.g., "Added example for async functions," "Clarified glob pattern," "Increased severity to ERROR."]  
[YYYY-MM-DD] - v[X.Y-1] - [Author/AI Session ID]: [Initial rule creation or previous update.]

---

This rule definition file guides the AI Executor (Cursor) in maintaining code quality and consistency. Ensure all sections are filled accurately and kept up-to-date.
